/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import Logic.*;
import Connection.DBconnection;
import Connection.DBconnectionImpl;
import Implementation.OfficeImpl;
import Implementation.OfficeTransImpl;
import Implementation.SupplierImpl;
import Implementation.SupplierTransImpl;
import Logic.Manager;
import Logic.Office;
import java.awt.Color;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Raffy
 */
public class CustomerGUI extends javax.swing.JFrame {

    /**
     * Creates new foCustomerGUImer
     */
    DefaultTableModel tableQuery1 = new DefaultTableModel();
    DefaultTableModel tableQuery2 = new DefaultTableModel();
    DefaultTableModel tableQuery3 = new DefaultTableModel();
    DefaultTableModel tableQuery4 = new DefaultTableModel();
    private Connection connection;
    private DBconnection dBConnection;
    private Scanner inS;
    private Manager mngr = new Manager();;
    DefaultTableModel supplyListQuery;
    
    CustomerGUI() {
        initComponents();
        DBconnectionImpl dBConnection;
        Connection connection;
        tableQuery1 = (DefaultTableModel)officeTable.getModel();
            try {
            OfficeTransaction oT;
            dBConnection = DBconnection.getInstance();
            connection = dBConnection.getConnection();
            String query = "select * from SalesTransaction where officeId is not null order by date;";
            PreparedStatement preparedStatement = connection.prepareStatement(query);;
            ResultSet rs = preparedStatement.executeQuery();
            ArrayList<OfficeTransaction> Transactions = new ArrayList<OfficeTransaction>();
            while (rs.next()) {
                oT = new OfficeTransaction();
                tableQuery1.insertRow(tableQuery1.getRowCount(), new Object[]{rs.getInt("inVoice"), rs.getDate("date"), rs.getDate("dateOfPayment"),
                rs.getDate("dateReceived"),rs.getDouble("total"), rs.getInt("terms")});
            }   
        } catch (SQLException ex) {
            Logger.getLogger(OfficeTransImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        supplier = new javax.swing.JButton();
        products = new javax.swing.JButton();
        supplierT = new javax.swing.JButton();
        customerT = new javax.swing.JButton();
        instructions = new javax.swing.JButton();
        export = new javax.swing.JButton();
        success = new javax.swing.JLabel();
        logout = new javax.swing.JButton();
        all = new javax.swing.JButton();
        paid = new javax.swing.JButton();
        newTransaction = new javax.swing.JButton();
        customerList = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        officepane = new javax.swing.JScrollPane();
        officeTable = new javax.swing.JTable();
        setaspaid = new javax.swing.JButton();
        setasdelivered = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        background1 = new javax.swing.JLabel();
        prevButton = new javax.swing.JButton();
        newCustomer = new javax.swing.JButton();
        editOffice = new javax.swing.JButton();
        officespane1 = new javax.swing.JScrollPane();
        officelisttable = new javax.swing.JTable();
        background2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1200, 672));
        setMinimumSize(new java.awt.Dimension(1200, 672));
        setPreferredSize(new java.awt.Dimension(1200, 710));
        setResizable(false);
        getContentPane().setLayout(null);

        supplier.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        supplier.setOpaque(false);
        supplier.setContentAreaFilled(false);
        supplier.setBorderPainted(false);
        supplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierActionPerformed(evt);
            }
        });
        getContentPane().add(supplier);
        supplier.setBounds(80, 240, 170, 70);

        products.setToolTipText("");
        products.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        products.setOpaque(false);
        products.setContentAreaFilled(false);
        products.setBorderPainted(false);
        products.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productsActionPerformed(evt);
            }
        });
        getContentPane().add(products);
        products.setBounds(80, 313, 170, 72);

        supplierT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        supplierT.setOpaque(false);
        supplierT.setContentAreaFilled(false);
        supplierT.setBorderPainted(false);
        supplierT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierTActionPerformed(evt);
            }
        });
        getContentPane().add(supplierT);
        supplierT.setBounds(80, 385, 170, 70);

        customerT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        customerT.setOpaque(false);
        customerT.setContentAreaFilled(false);
        customerT.setBorderPainted(false);
        getContentPane().add(customerT);
        customerT.setBounds(80, 457, 170, 70);

        instructions.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        instructions.setOpaque(false);
        instructions.setContentAreaFilled(false);
        instructions.setBorderPainted(false);
        getContentPane().add(instructions);
        instructions.setBounds(80, 530, 170, 70);

        export.setOpaque(false);
        export.setContentAreaFilled(false);
        export.setBorderPainted(false);
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });
        getContentPane().add(export);
        export.setBounds(770, 120, 70, 30);

        success.setText(" ");
        getContentPane().add(success);
        success.setBounds(591, 630, 110, 14);

        logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logout.setOpaque(false);
        logout.setContentAreaFilled(false);
        logout.setBorderPainted(false);
        getContentPane().add(logout);
        logout.setBounds(80, 600, 170, 70);

        all.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        all.setOpaque(false);
        all.setContentAreaFilled(false);
        all.setBorderPainted(false);
        all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allActionPerformed(evt);
            }
        });
        getContentPane().add(all);
        all.setBounds(280, 110, 50, 50);

        paid.setToolTipText("");
        paid.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        paid.setOpaque(false);
        paid.setContentAreaFilled(false);
        paid.setBorderPainted(false);
        paid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidActionPerformed(evt);
            }
        });
        getContentPane().add(paid);
        paid.setBounds(350, 110, 60, 50);

        newTransaction.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newTransaction.setOpaque(false);
        newTransaction.setContentAreaFilled(false);
        newTransaction.setBorderPainted(false);
        newTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTransactionActionPerformed(evt);
            }
        });
        getContentPane().add(newTransaction);
        newTransaction.setBounds(850, 120, 80, 30);

        customerList.setOpaque(false);
        customerList.setContentAreaFilled(false);
        customerList.setBorderPainted(false);
        customerList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        customerList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerListActionPerformed(evt);
            }
        });
        getContentPane().add(customerList);
        customerList.setBounds(670, 30, 190, 40);

        nextButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        nextButton.setOpaque(false);
        nextButton.setContentAreaFilled(false);
        nextButton.setBorderPainted(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        getContentPane().add(nextButton);
        nextButton.setBounds(880, 30, 40, 40);

        officeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice", "Date", "Date of Payment", "Date Received", "Total", "Terms"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        officepane.setViewportView(officeTable);

        getContentPane().add(officepane);
        officepane.setBounds(270, 180, 650, 430);

        setaspaid.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setaspaid.setOpaque(false);
        setaspaid.setContentAreaFilled(false);
        setaspaid.setBorderPainted(false);
        setaspaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setaspaidActionPerformed(evt);
            }
        });
        getContentPane().add(setaspaid);
        setaspaid.setBounds(720, 620, 90, 30);

        setasdelivered.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setasdelivered.setOpaque(false);
        setasdelivered.setContentAreaFilled(false);
        setasdelivered.setBorderPainted(false);
        setasdelivered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setasdeliveredActionPerformed(evt);
            }
        });
        getContentPane().add(setasdelivered);
        setasdelivered.setBounds(820, 620, 100, 30);

        searchField.setBorder(null);
        searchField.setBackground(new Color(180, 69, 67));
        getContentPane().add(searchField);
        searchField.setBounds(60, 120, 170, 30);

        search.setOpaque(false);
        search.setContentAreaFilled(false);
        search.setBorderPainted(false);
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        getContentPane().add(search);
        search.setBounds(20, 118, 40, 30);

        background1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/office-final.jpg"))); // NOI18N
        background1.setMaximumSize(new java.awt.Dimension(1300, 768));
        background1.setMinimumSize(new java.awt.Dimension(1300, 768));
        background1.setPreferredSize(new java.awt.Dimension(1300, 768));
        getContentPane().add(background1);
        background1.setBounds(0, 0, 1300, 670);

        prevButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        prevButton.setOpaque(false);
        prevButton.setContentAreaFilled(false);
        prevButton.setBorderPainted(false);
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        getContentPane().add(prevButton);
        prevButton.setBounds(270, 30, 40, 40);

        newCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newCustomer.setOpaque(false);
        newCustomer.setContentAreaFilled(false);
        newCustomer.setBorderPainted(false);
        newCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCustomerActionPerformed(evt);
            }
        });
        getContentPane().add(newCustomer);
        newCustomer.setBounds(760, 120, 70, 30);

        editOffice.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editOffice.setOpaque(false);
        editOffice.setContentAreaFilled(false);
        editOffice.setBorderPainted(false);
        editOffice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOfficeActionPerformed(evt);
            }
        });
        getContentPane().add(editOffice);
        editOffice.setBounds(840, 120, 70, 30);

        officelisttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Contact Number", "Fax Number", "Address"
            }
        ));
        officespane1.setViewportView(officelisttable);

        getContentPane().add(officespane1);
        officespane1.setBounds(270, 180, 650, 480);

        background2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/office-list.jpg"))); // NOI18N
        background2.setText("jLabel1");
        getContentPane().add(background2);
        background2.setBounds(0, 0, 1200, 670);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customerListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerListActionPerformed
        background1.setVisible(false);
        background2.setVisible(true);
        all.setVisible(false);
        paid.setVisible(false);
        customerList.setVisible(false);
        officeTable.setVisible(false);
        nextButton.setVisible(false);
        newTransaction.setVisible(false);
        newCustomer.setVisible(true);
        officepane.setVisible(false);
        officespane1.setVisible(true);
        try {
            tableQuery3.setRowCount(0);  
            tableQuery3 = (DefaultTableModel)officelisttable.getModel();
            dBConnection = DBconnection.getInstance();
            connection = dBConnection.getConnection();
            String query = "select * from office order by name;";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.execute();
            ResultSet rs = preparedStatement.executeQuery();
            ArrayList<Office> office = new ArrayList();
             while (rs.next()) {
                tableQuery3.insertRow(tableQuery3.getRowCount(), new Object[]{rs.getString("name"), rs.getString("contactNo"), rs.getString("faxNo"),
                rs.getString("address")});
            }   
        } catch (SQLException ex) {
            Logger.getLogger(OfficeImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_customerListActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        background2.setVisible(false);
        background1.setVisible(true);
        all.setVisible(true);
        paid.setVisible(true);
        customerList.setVisible(true);
        officeTable.setVisible(true);
        nextButton.setVisible(true);
        newTransaction.setVisible(true);
        officepane.setVisible(true);
        officespane1.setVisible(true);
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        background1.setVisible(false);
        background2.setVisible(true);
        all.setVisible(false);
        officespane1.setVisible(true);
        paid.setVisible(false);
        customerList.setVisible(false);
        officeTable.setVisible(false);
        nextButton.setVisible(false);
        newTransaction.setVisible(false);
        newCustomer.setVisible(true);
        officepane.setVisible(false);
        try {
            tableQuery3.setRowCount(0);  
            tableQuery3 = (DefaultTableModel)officelisttable.getModel();
            dBConnection = DBconnection.getInstance();
            connection = dBConnection.getConnection();
            String query = "select * from office order by name;";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.execute();
            ResultSet rs = preparedStatement.executeQuery();
            ArrayList<Office> office = new ArrayList();
             while (rs.next()) {
                tableQuery3.insertRow(tableQuery3.getRowCount(), new Object[]{rs.getString("name"), rs.getString("contactNo"), rs.getString("faxNo"),
                rs.getString("address")});
            }   
        } catch (SQLException ex) {
            Logger.getLogger(OfficeImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void newTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTransactionActionPerformed
        recordOT record = new recordOT();
        record.setVisible(true);
    }//GEN-LAST:event_newTransactionActionPerformed

    private void supplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierActionPerformed
        SupplierGUI supplier = new SupplierGUI();
        supplier.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_supplierActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        Office o;
        background1.setVisible(false);
        background2.setVisible(true);
        all.setVisible(false);
        paid.setVisible(false);
        customerList.setVisible(false);
        officeTable.setVisible(false);
        nextButton.setVisible(false);
        newTransaction.setVisible(false);
        newCustomer.setLocation(830,120);
        officeTable.setVisible(false);
        String search = searchField.getText();
	o = mngr.getO(search);
        String data1 = o.getName();
        String data2 = o.getContact();
        String data3 = o.getFaxNo();
        String data4 = o.getAddress();
        Object[] row = { data1, data2, data3, data4 };
        DefaultTableModel model = (DefaultTableModel) officelisttable.getModel();
        model.addRow(row);
        //mngr.printOffice(o);
        //else{
            //error
        //}
    }//GEN-LAST:event_searchActionPerformed

    private void paidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidActionPerformed
            DefaultTableModel tableQuery = new DefaultTableModel();   
            tableQuery = (DefaultTableModel)officeTable.getModel();
            try {
                dBConnection = DBconnection.getInstance();
                connection = dBConnection.getConnection();
                String query = "select * from salestransaction where dateOfPayment is not null";
                PreparedStatement preparedStatement = connection.prepareStatement(query);
                ResultSet rs = preparedStatement.executeQuery();
                ArrayList<SupplierTransaction> Transactions = new ArrayList<SupplierTransaction>();
                while (rs.next()) {
                    SupplierTransaction sT = new SupplierTransaction();
                    tableQuery.insertRow(tableQuery.getRowCount(), new Object[]{rs.getString("inVoice"), rs.getInt("terms"), 
                    rs.getDate("dateRecorded"),rs.getDate("dateOfPayment"),rs.getDate("dateReceived"),rs.getDouble("total")
                    });
                }   
            } catch (SQLException ex) {
                Logger.getLogger(SupplierTransImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_paidActionPerformed

    private void allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allActionPerformed

    private void newCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCustomerActionPerformed
        newCT newcustomer = new newCT();
        newcustomer.setVisible(true);
    }//GEN-LAST:event_newCustomerActionPerformed

    private void editOfficeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOfficeActionPerformed
        editO edit = new editO();
        edit.setVisible(true);
    }//GEN-LAST:event_editOfficeActionPerformed

    private void supplierTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierTActionPerformed
        walkin walk = new walkin();
        walk.setVisible(true);
    }//GEN-LAST:event_supplierTActionPerformed

    private void productsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productsActionPerformed
        InventoryGUI products1 = new InventoryGUI();
        products1.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_productsActionPerformed

    private void setaspaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setaspaidActionPerformed
        Manager mngr = new Manager();
        supplyListQuery = (DefaultTableModel)officeTable.getModel();
        String iV = supplyListQuery.getValueAt(officeTable.getSelectedRow(), 0).toString(); //iv = invoice make that column an integer
        if((mngr.getOT(iV).getDateOfDelivery()!=null)){
            mngr.setDatePayedOT(iV);
            System.out.println("PAID");
            success.setText("Paid!");
        }
        else if (mngr.getOT(iV).getDateOfDelivery()==null){
            System.out.println("Error, transaction is not yet delivered");
            success.setText("Error! transaction has not yet been delivered");
        }
    }//GEN-LAST:event_setaspaidActionPerformed

    private void setasdeliveredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setasdeliveredActionPerformed
        Manager mngr = new Manager();
        supplyListQuery = (DefaultTableModel)officeTable.getModel();
        String iV = supplyListQuery.getValueAt(officeTable.getSelectedRow(), 0).toString(); //iv = invoice make that column an integer
        success.setText("Delivered!");
        //make sell green = yellow
        mngr.setDateDeliveredOT(iV);
    }//GEN-LAST:event_setasdeliveredActionPerformed

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerGUI().setVisible(true);;
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton all;
    private javax.swing.JLabel background1;
    private javax.swing.JLabel background2;
    private javax.swing.JButton customerList;
    private javax.swing.JButton customerT;
    private javax.swing.JButton editOffice;
    private javax.swing.JButton export;
    private javax.swing.JButton instructions;
    private javax.swing.JButton logout;
    private javax.swing.JButton newCustomer;
    private javax.swing.JButton newTransaction;
    private javax.swing.JButton nextButton;
    private javax.swing.JTable officeTable;
    private javax.swing.JTable officelisttable;
    private javax.swing.JScrollPane officepane;
    private javax.swing.JScrollPane officespane1;
    private javax.swing.JButton paid;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton products;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton setasdelivered;
    private javax.swing.JButton setaspaid;
    private javax.swing.JLabel success;
    private javax.swing.JButton supplier;
    private javax.swing.JButton supplierT;
    // End of variables declaration//GEN-END:variables
}
