/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import Connection.DBconnection;
import Implementation.BundleImpl;
import Implementation.BundleListImpl;
import Implementation.SupplierImpl;
import Implementation.SupplierTransImpl;
import Logic.Manager;
import Logic.Supplier;
import Logic.SupplierTransaction;
import java.awt.Color;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import Logic.*;
import java.math.BigInteger;
import java.util.HashMap;

/**
 *
 * @author Raffy
 */
public class SupplierGUI extends javax.swing.JFrame {

    /**
     * Creates new form SupplierGUI
     */
    private Scanner inS;
   // private Manager mngr = new Manager();;
    private Connection connection;
    private DBconnection dBConnection;
    DefaultTableModel supplyListQuery;
        DefaultTableModel tableQuery1 = new DefaultTableModel();
    DefaultTableModel tableQuery2 = new DefaultTableModel();
    DefaultTableModel tableQuery3 = new DefaultTableModel();
    DefaultTableModel tableQuery4 = new DefaultTableModel();
    private SupplierImpl sI = new SupplierImpl();
    DefaultTableModel tableQuery = new DefaultTableModel();
    public SupplierGUI() {
        initComponents();
        tableQuery = (DefaultTableModel)supplierTable.getModel();
            try {
                tableQuery.setRowCount(0); 
                sI = new SupplierImpl();
                dBConnection = DBconnection.getInstance();
                connection = dBConnection.getConnection();
                String query = "select * from suppliertrans order by dateRecorded;";
                PreparedStatement preparedStatement = connection.prepareStatement(query);
                ResultSet rs = preparedStatement.executeQuery();
                ArrayList<SupplierTransaction> Transactions = new ArrayList<SupplierTransaction>();
                while (rs.next()) {
                    SupplierTransaction sT = new SupplierTransaction();
                    tableQuery.insertRow(tableQuery.getRowCount(), new Object[]{rs.getString("inVoice"), rs.getInt("terms"), 
                    rs.getDate("dateRecorded"),rs.getDate("dateOfPayment"),rs.getDate("dateReceived"),rs.getDouble("total")
                    });
                }   
            } catch (SQLException ex) {
                Logger.getLogger(SupplierTransImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        all = new javax.swing.JButton();
        lowsupp = new javax.swing.JButton();
        nearEnd = new javax.swing.JButton();
        success = new javax.swing.JLabel();
        paid = new javax.swing.JButton();
        newTransaction = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        customer = new javax.swing.JButton();
        products = new javax.swing.JButton();
        customerT = new javax.swing.JButton();
        supplierT = new javax.swing.JButton();
        instructions = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        supplierList = new javax.swing.JButton();
        search = new javax.swing.JButton();
        setasdelivered = new javax.swing.JButton();
        setaspaid = new javax.swing.JButton();
        jpane = new javax.swing.JScrollPane();
        supplierTable = new javax.swing.JTable();
        pane2 = new javax.swing.JScrollPane();
        lowtable = new javax.swing.JTable();
        background1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        supplierlisttable = new javax.swing.JTable();
        editSupplier = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        newSupplier = new javax.swing.JButton();
        background2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1200, 672));
        setMinimumSize(new java.awt.Dimension(1200, 672));
        setPreferredSize(new java.awt.Dimension(1200, 710));
        getContentPane().setLayout(null);

        all.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        all.setOpaque(false);
        all.setContentAreaFilled(false);
        all.setBorderPainted(false);
        all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allActionPerformed(evt);
            }
        });
        getContentPane().add(all);
        all.setBounds(280, 110, 60, 50);

        lowsupp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lowsupp.setOpaque(false);
        lowsupp.setContentAreaFilled(false);
        lowsupp.setBorderPainted(false);
        lowsupp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowsuppActionPerformed(evt);
            }
        });
        getContentPane().add(lowsupp);
        lowsupp.setBounds(470, 110, 110, 50);

        nearEnd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        nearEnd.setOpaque(false);
        nearEnd.setContentAreaFilled(false);
        nearEnd.setBorderPainted(false);
        nearEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nearEndActionPerformed(evt);
            }
        });
        getContentPane().add(nearEnd);
        nearEnd.setBounds(350, 110, 110, 50);

        success.setText("  ");
        getContentPane().add(success);
        success.setBounds(600, 630, 110, 14);

        paid.setText("paid");
        paid.setToolTipText("");
        paid.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        paid.setOpaque(false);
        paid.setContentAreaFilled(false);
        paid.setBorderPainted(false);
        paid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidActionPerformed(evt);
            }
        });
        getContentPane().add(paid);
        paid.setBounds(590, 110, 60, 50);

        newTransaction.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newTransaction.setOpaque(false);
        newTransaction.setContentAreaFilled(false);
        newTransaction.setBorderPainted(false);
        newTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTransactionActionPerformed(evt);
            }
        });
        getContentPane().add(newTransaction);
        newTransaction.setBounds(850, 120, 80, 30);

        searchField.setBorder(null);
        searchField.setBackground(new Color(180, 69, 67));
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchFieldKeyTyped(evt);
            }
        });
        getContentPane().add(searchField);
        searchField.setBounds(60, 120, 170, 30);

        customer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        customer.setOpaque(false);
        customer.setContentAreaFilled(false);
        customer.setBorderPainted(false);
        customer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerActionPerformed(evt);
            }
        });
        getContentPane().add(customer);
        customer.setBounds(80, 170, 170, 70);

        products.setToolTipText("");
        products.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        products.setOpaque(false);
        products.setContentAreaFilled(false);
        products.setBorderPainted(false);
        products.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productsActionPerformed(evt);
            }
        });
        getContentPane().add(products);
        products.setBounds(80, 313, 170, 72);

        customerT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        customerT.setOpaque(false);
        customerT.setContentAreaFilled(false);
        customerT.setBorderPainted(false);
        getContentPane().add(customerT);
        customerT.setBounds(80, 457, 170, 70);

        supplierT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        supplierT.setOpaque(false);
        supplierT.setContentAreaFilled(false);
        supplierT.setBorderPainted(false);
        supplierT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierTActionPerformed(evt);
            }
        });
        getContentPane().add(supplierT);
        supplierT.setBounds(80, 385, 170, 70);

        instructions.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        instructions.setOpaque(false);
        instructions.setContentAreaFilled(false);
        instructions.setBorderPainted(false);
        getContentPane().add(instructions);
        instructions.setBounds(80, 530, 170, 70);

        nextButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        nextButton.setOpaque(false);
        nextButton.setContentAreaFilled(false);
        nextButton.setBorderPainted(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        getContentPane().add(nextButton);
        nextButton.setBounds(880, 30, 40, 40);

        supplierList.setOpaque(false);
        supplierList.setContentAreaFilled(false);
        supplierList.setBorderPainted(false);
        supplierList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        supplierList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierListActionPerformed(evt);
            }
        });
        getContentPane().add(supplierList);
        supplierList.setBounds(680, 30, 190, 40);

        search.setOpaque(false);
        search.setContentAreaFilled(false);
        search.setBorderPainted(false);
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        getContentPane().add(search);
        search.setBounds(20, 118, 40, 30);

        setasdelivered.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setasdelivered.setOpaque(false);
        setasdelivered.setContentAreaFilled(false);
        setasdelivered.setBorderPainted(false);
        setasdelivered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setasdeliveredActionPerformed(evt);
            }
        });
        getContentPane().add(setasdelivered);
        setasdelivered.setBounds(820, 620, 100, 30);

        setaspaid.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setaspaid.setOpaque(false);
        setaspaid.setContentAreaFilled(false);
        setaspaid.setBorderPainted(false);
        setaspaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setaspaidActionPerformed(evt);
            }
        });
        getContentPane().add(setaspaid);
        setaspaid.setBounds(720, 620, 90, 30);

        supplierTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice", "Terms", "Date Recorded", "Date of Payment", "Date Recieved", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jpane.setViewportView(supplierTable);

        getContentPane().add(jpane);
        jpane.setBounds(280, 190, 640, 420);

        lowtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brand Name", "Item Name", "Quantity Per Bundle", "Unit", "Stock"
            }
        ));
        pane2.setViewportView(lowtable);

        getContentPane().add(pane2);
        pane2.setBounds(280, 190, 640, 420);

        background1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/supplier-trans.jpg"))); // NOI18N
        background1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(background1);
        background1.setBounds(0, 1, 1200, 670);

        supplierlisttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Contact Number", "Fax Number", "Address"
            }
        ));
        supplierlisttable.setOpaque(false);
        jScrollPane2.setViewportView(supplierlisttable);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(280, 190, 640, 420);

        editSupplier.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editSupplier.setOpaque(false);
        editSupplier.setContentAreaFilled(false);
        editSupplier.setBorderPainted(false);
        editSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSupplierActionPerformed(evt);
            }
        });
        getContentPane().add(editSupplier);
        editSupplier.setBounds(830, 120, 90, 30);

        prevButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        prevButton.setOpaque(false);
        prevButton.setContentAreaFilled(false);
        prevButton.setBorderPainted(false);
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        getContentPane().add(prevButton);
        prevButton.setBounds(270, 30, 40, 40);

        newSupplier.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newSupplier.setOpaque(false);
        newSupplier.setContentAreaFilled(false);
        newSupplier.setBorderPainted(false);
        newSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSupplierActionPerformed(evt);
            }
        });
        getContentPane().add(newSupplier);
        newSupplier.setBounds(750, 120, 70, 30);

        background2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/supplier-list.jpg"))); // NOI18N
        getContentPane().add(background2);
        background2.setBounds(0, 0, 1200, 670);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nearEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nearEndActionPerformed
        Manager mngr = new Manager();    
        ChartPanel cP = new ChartPanel();
        System.out.print(mngr.fastMovingB().size());
            System.out.print(mngr.fastMovingI().size());
            cP.start(mngr.fastMovingB(),mngr.fastMovingI());
    }//GEN-LAST:event_nearEndActionPerformed

    private void newTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTransactionActionPerformed
        recordST record = new recordST();
        record.setVisible(true);
    }//GEN-LAST:event_newTransactionActionPerformed

    private void customerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerActionPerformed
        CustomerGUI custom = new CustomerGUI();
        custom.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_customerActionPerformed

    private void paidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidActionPerformed
        pane2.setVisible(false);
        jpane.setVisible(true);
        tableQuery = (DefaultTableModel)supplierTable.getModel();
            try {
                tableQuery.setRowCount(0); 
                sI = new SupplierImpl();
                dBConnection = DBconnection.getInstance();
                connection = dBConnection.getConnection();
                String query = "select * from suppliertrans where dateOfPayment is not null";
                PreparedStatement preparedStatement = connection.prepareStatement(query);
                ResultSet rs = preparedStatement.executeQuery();
                ArrayList<SupplierTransaction> Transactions = new ArrayList<SupplierTransaction>();
                while (rs.next()) {
                    SupplierTransaction sT = new SupplierTransaction();
                    tableQuery.insertRow(tableQuery.getRowCount(), new Object[]{rs.getString("inVoice"), rs.getInt("terms"), 
                    rs.getDate("dateRecorded"),rs.getDate("dateOfPayment"),rs.getDate("dateReceived"),rs.getDouble("total")
                    });
                }   
            } catch (SQLException ex) {
                Logger.getLogger(SupplierTransImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_paidActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        jScrollPane2.setVisible(true);
        background1.setVisible(false);
        background2.setVisible(true);
        all.setVisible(false);
        lowsupp.setVisible(false);
        nearEnd.setVisible(false);
        paid.setVisible(false);
        supplierList.setVisible(false);
        jpane.setVisible(false);
        nextButton.setVisible(false);
        newTransaction.setVisible(false);
        newSupplier.setVisible(true);
        supplierlisttable.setVisible(true);
        pane2.setVisible(false);
        tableQuery1 = (DefaultTableModel)supplierlisttable.getModel();
        try {            
            tableQuery1.setRowCount(0); 
            dBConnection = DBconnection.getInstance();
            connection = dBConnection.getConnection();
            String query = "select * from supplier order by name;";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet rs = preparedStatement.executeQuery();
            ArrayList<Supplier> s = new ArrayList<Supplier>();
             while (rs.next()) {
                tableQuery1.insertRow(tableQuery1.getRowCount(), new Object[]{rs.getString("name"), rs.getString("contactNo"), rs.getString("faxNo"),
                rs.getString("address")});
            }   
        } catch (SQLException ex) {
            Logger.getLogger(SupplierImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void supplierListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierListActionPerformed
        background1.setVisible(false);
        background2.setVisible(true);
        all.setVisible(false);
        lowsupp.setVisible(false);
        nearEnd.setVisible(false);
        paid.setVisible(false);
        supplierList.setVisible(false);
        jpane.setVisible(false);
        nextButton.setVisible(false);
        newTransaction.setVisible(false);
        newSupplier.setVisible(true);
        jScrollPane2.setVisible(true);
        supplierlisttable.setVisible(true);
        pane2.setVisible(false);
        tableQuery1 = (DefaultTableModel)supplierlisttable.getModel();
        try {            
            tableQuery1.setRowCount(0); 
            dBConnection = DBconnection.getInstance();
            connection = dBConnection.getConnection();
            String query = "select * from supplier order by name;";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet rs = preparedStatement.executeQuery();
            ArrayList<Supplier> s = new ArrayList<Supplier>();
             while (rs.next()) {
                tableQuery1.insertRow(tableQuery1.getRowCount(), new Object[]{rs.getString("name"), rs.getString("contactNo"), rs.getString("faxNo"),
                rs.getString("address")});
            }   
        } catch (SQLException ex) {
            Logger.getLogger(SupplierImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_supplierListActionPerformed

    private void newSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSupplierActionPerformed
        newST st = new newST();
        st.setVisible(true);
    }//GEN-LAST:event_newSupplierActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        background2.setVisible(false);
        background1.setVisible(true);
        all.setVisible(true);
        lowsupp.setVisible(true);
        nearEnd.setVisible(true);
        paid.setVisible(true);
        supplierList.setVisible(true);
        jpane.setVisible(true);
        nextButton.setVisible(true);
        newTransaction.setVisible(true);
    }//GEN-LAST:event_prevButtonActionPerformed

    private void searchFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldKeyTyped

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
	Manager mngr = new Manager();
        Supplier s;
        background1.setVisible(false);
        background2.setVisible(true);
        all.setVisible(false);
        lowsupp.setVisible(false);
        nearEnd.setVisible(false);
        paid.setVisible(false);
        supplierList.setVisible(false);
        nextButton.setVisible(false);
        newTransaction.setVisible(false);
        newSupplier.setLocation(830,120);
        supplierTable.setVisible(false);
	s = mngr.getS(searchField.getText().toUpperCase());
        String data1 = s.getName();
        String data2 = s.getContact();
        String data3 = s.getFaxNo();
        String data4 = s.getAddress();
        Object[] row = { data1, data2, data3, data4 };
        DefaultTableModel model = (DefaultTableModel) supplierlisttable.getModel();
        model.addRow(row);
    }//GEN-LAST:event_searchActionPerformed

    private void editSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSupplierActionPerformed
        editS editsupplier = new editS();
        editsupplier.setVisible(true);
    }//GEN-LAST:event_editSupplierActionPerformed

    private void setasdeliveredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setasdeliveredActionPerformed
        Manager mngr = new Manager();
        supplyListQuery = (DefaultTableModel)supplierTable.getModel();
        String iV = supplyListQuery.getValueAt(supplierTable.getSelectedRow(), 0).toString(); //iv = invoice make that column an integer
        mngr.setDateDelivered(iV);
        System.out.println("PAID");
        //make sell green = yellow
        success.setText("Delivered!");
    }//GEN-LAST:event_setasdeliveredActionPerformed

    private void setaspaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setaspaidActionPerformed
        Manager mngr = new Manager();
        supplyListQuery = (DefaultTableModel)supplierTable.getModel();
        String iV = supplyListQuery.getValueAt(supplierTable.getSelectedRow(), 0).toString(); //iv = invoice make that column an integer
        if((mngr.getST(iV).getDateOfDelivery()!=null)){
            mngr.setDatePayed(iV);
            System.out.println("PAID");
        }
        else if (mngr.getST(iV).getDateOfDelivery()==null){
            System.out.println("Error, transaction is not yet delivered");
        }
        success.setText("Paid!");
    }//GEN-LAST:event_setaspaidActionPerformed

    private void productsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productsActionPerformed
        InventoryGUI products = new InventoryGUI();
        products.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_productsActionPerformed

    private void lowsuppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowsuppActionPerformed
        jpane.setVisible(false);
        pane2.setVisible(true);
        lowtable.setVisible(true);
        jScrollPane2.setVisible(false);
      try {
            dBConnection = DBconnection.getInstance();
            connection = dBConnection.getConnection();
            supplyListQuery = (DefaultTableModel)lowtable.getModel();
            supplyListQuery.setRowCount(0); 
            String query = "select * from Item where unit is not null order by brandName;";
            PreparedStatement preparedStatement = connection.prepareStatement(query);

            ResultSet rs = preparedStatement.executeQuery();
            ArrayList<Item> bundle = new ArrayList();
            while (rs.next()) {
                supplyListQuery.insertRow(supplyListQuery.getRowCount(), new Object[]{
                rs.getString("brandName"), 
                rs.getString("name"), 
                rs.getInt("QtyPerBundle"),
                rs.getString("unit"),
                rs.getInt("stock"),
                });
            }   
        } catch (SQLException ex) {
            Logger.getLogger(BundleImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_lowsuppActionPerformed

    private void allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allActionPerformed
                tableQuery = (DefaultTableModel)supplierTable.getModel();
            try {
                sI = new SupplierImpl();
                dBConnection = DBconnection.getInstance();
                connection = dBConnection.getConnection();
                String query = "select * from suppliertrans order by dateRecorded;";
                PreparedStatement preparedStatement = connection.prepareStatement(query);
                ResultSet rs = preparedStatement.executeQuery();
                ArrayList<SupplierTransaction> Transactions = new ArrayList<SupplierTransaction>();
                while (rs.next()) {
                    SupplierTransaction sT = new SupplierTransaction();
                    tableQuery.insertRow(tableQuery.getRowCount(), new Object[]{rs.getString("inVoice"), rs.getInt("terms"), 
                    rs.getDate("dateRecorded"),rs.getDate("dateOfPayment"),rs.getDate("dateReceived"),rs.getDouble("total")
                    });
                }   
            } catch (SQLException ex) {
                Logger.getLogger(SupplierTransImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_allActionPerformed

    private void supplierTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierTActionPerformed
        walkin walk = new walkin();
        walk.setVisible(true);
    }//GEN-LAST:event_supplierTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SupplierGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SupplierGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SupplierGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SupplierGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SupplierGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton all;
    private javax.swing.JLabel background1;
    private javax.swing.JLabel background2;
    private javax.swing.JButton customer;
    private javax.swing.JButton customerT;
    private javax.swing.JButton editSupplier;
    private javax.swing.JButton instructions;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jpane;
    private javax.swing.JButton lowsupp;
    private javax.swing.JTable lowtable;
    private javax.swing.JButton nearEnd;
    private javax.swing.JButton newSupplier;
    private javax.swing.JButton newTransaction;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton paid;
    private javax.swing.JScrollPane pane2;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton products;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton setasdelivered;
    private javax.swing.JButton setaspaid;
    private javax.swing.JLabel success;
    private javax.swing.JButton supplierList;
    private javax.swing.JButton supplierT;
    private javax.swing.JTable supplierTable;
    private javax.swing.JTable supplierlisttable;
    // End of variables declaration//GEN-END:variables
}
