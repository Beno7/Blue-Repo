/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import Connection.DBconnection;
import Connection.DBconnectionImpl;
import Logic.Bundle;
import Logic.BundleManager;
import Logic.Item;
import Logic.OTransaction;
import Logic.Office;
import Logic.OfficeManager;
import Logic.Supplier;
import Logic.SupplierManager;
import Logic.TransactionDB;
import Logic.WRInventory;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import java.awt.Cursor;
/**
 *
 * @author raffy
 */
public class sellSupply extends javax.swing.JFrame {
    Item i;
    Bundle b;
    String s, s1, s2, b1;
    int ctr, count;
    Double d = 0.0;
    Calendar c;
    Date d1;
    Supplier suppT;
    OTransaction oT = null;
    Office o;
    	private	Scanner inS;
	private	String sN;//supplier name
	private	String bN, N;//Items primary key
	private String u;// unit of bundle
	private String oN; // office name
	private String iV; // inVoice
	private Office tO;
        //private Bundle c;
	private int m;// measurement of a bundle
	private Double pSP, sP;// sell price of a package, suppliers price for the item
	private	Double price;//price of Item
	private	WRInventory wR;//instance of inventory
	private	Item tempI;//temporary Item variable
	private	int bool;//to check if supplier exists in db
	private	SupplierManager sM;
	private OfficeManager oM = new OfficeManager();
	private TransactionDB sTM;
	private BundleManager bM = new BundleManager();
    DefaultTableModel chartQuery = new DefaultTableModel();
    DefaultListModel officeListQuery = new DefaultListModel();
    DefaultTableModel itemListQuery = new DefaultTableModel();
    
    public sellSupply() {
        initComponents();
        DBconnectionImpl dBConnection;
        Connection connection;
        
        //itemListQuery = (DefaultTableModel)itemTable.getModel();
            try {
                dBConnection = DBconnection.getInstance();
                connection = dBConnection.getConnection();
                String query = "select * from Office";
                PreparedStatement preparedStatement = connection.prepareStatement(query);
                ResultSet rs = preparedStatement.executeQuery();
                while (rs.next()) {
                    officeListQuery.addElement(rs.getString("name"));
                }   
            } catch (SQLException ex) {
                Logger.getLogger(buySupply.class.getName()).log(Level.SEVERE, null, ex);
            }
        officeList.setModel(officeListQuery);
        itemListQuery = (DefaultTableModel)stockTable.getModel();
            try {
                dBConnection = DBconnection.getInstance();
                connection = dBConnection.getConnection();
                String query = "select * from Prices";
                PreparedStatement preparedStatement = connection.prepareStatement(query);
                ResultSet rs = preparedStatement.executeQuery();
                while (rs.next()) {
                    itemListQuery.insertRow(itemListQuery.getRowCount(), new Object[]{rs.getString("name"), rs.getString("brandName")});
                }   
            } catch (SQLException ex) {
                Logger.getLogger(buySupply.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        officeList = new javax.swing.JList();
        menuButton = new javax.swing.JButton();
        buyfromSupplierButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JButton();
        viewingButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        generateButton = new javax.swing.JButton();
        invoiceLabel = new javax.swing.JLabel();
        invoiceField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        termsField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        chart = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        itemField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        brandField = new javax.swing.JTextField();
        amountField = new javax.swing.JTextField();
        sellButton = new javax.swing.JButton();
        customerField = new javax.swing.JTextField();
        selectButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(915, 708));
        setMinimumSize(new java.awt.Dimension(915, 708));
        setPreferredSize(new java.awt.Dimension(915, 708));
        getContentPane().setLayout(null);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(660, 490, 230, 20);

        officeList.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(officeList);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(660, 170, 230, 190);

        menuButton.setOpaque(false);
        menuButton.setContentAreaFilled(false);
        menuButton.setBorderPainted(false);
        menuButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuButtonActionPerformed(evt);
            }
        });
        getContentPane().add(menuButton);
        menuButton.setBounds(10, 160, 50, 40);

        buyfromSupplierButton.setOpaque(false);
        buyfromSupplierButton.setContentAreaFilled(false);
        buyfromSupplierButton.setBorderPainted(false);
        buyfromSupplierButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        buyfromSupplierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyfromSupplierButtonActionPerformed(evt);
            }
        });
        getContentPane().add(buyfromSupplierButton);
        buyfromSupplierButton.setBounds(90, 50, 140, 40);

        settingsButton.setOpaque(false);
        settingsButton.setContentAreaFilled(false);
        settingsButton.setBorderPainted(false);
        settingsButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });
        getContentPane().add(settingsButton);
        settingsButton.setBounds(10, 240, 50, 40);

        viewingButton.setOpaque(false);
        viewingButton.setContentAreaFilled(false);
        viewingButton.setBorderPainted(false);
        viewingButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        viewingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewingButtonActionPerformed(evt);
            }
        });
        getContentPane().add(viewingButton);
        viewingButton.setBounds(10, 520, 50, 40);

        exitButton.setOpaque(false);
        exitButton.setContentAreaFilled(false);
        exitButton.setBorderPainted(false);
        exitButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        getContentPane().add(exitButton);
        exitButton.setBounds(10, 600, 50, 40);

        generateButton.setFont(new java.awt.Font("Myriad Pro", 0, 12)); // NOI18N
        generateButton.setText("Generate");
        generateButton.setToolTipText("");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(generateButton);
        generateButton.setBounds(750, 450, 100, 30);

        invoiceLabel.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        invoiceLabel.setForeground(new java.awt.Color(51, 51, 51));
        invoiceLabel.setText("Invoice:");
        getContentPane().add(invoiceLabel);
        invoiceLabel.setBounds(660, 570, 45, 40);

        invoiceField.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        getContentPane().add(invoiceField);
        invoiceField.setBounds(740, 580, 120, 21);

        jLabel2.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Terms:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(660, 510, 50, 15);

        termsField.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        getContentPane().add(termsField);
        termsField.setBounds(740, 500, 120, 21);

        stockTable.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        stockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Brand"
            }
        ));
        jScrollPane2.setViewportView(stockTable);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(100, 170, 540, 230);

        jLabel3.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(254, 254, 254));
        jLabel3.setText("Item List:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(340, 110, 80, 17);

        chart.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        chart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Stock", "Package", "Price"
            }
        ));
        jScrollPane3.setViewportView(chart);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(100, 420, 540, 230);

        jLabel4.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Amount:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(660, 540, 60, 30);

        jLabel5.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Item:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(660, 370, 40, 30);

        itemField.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        getContentPane().add(itemField);
        itemField.setBounds(740, 370, 120, 21);

        jLabel6.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Brand:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(660, 410, 51, 30);

        brandField.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        getContentPane().add(brandField);
        brandField.setBounds(740, 410, 120, 21);

        amountField.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        amountField.setToolTipText("");
        getContentPane().add(amountField);
        amountField.setBounds(740, 540, 120, 20);

        sellButton.setFont(new java.awt.Font("Myriad Pro", 0, 12)); // NOI18N
        sellButton.setText("Sell");
        sellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellButtonActionPerformed(evt);
            }
        });
        getContentPane().add(sellButton);
        sellButton.setBounds(750, 630, 100, 21);

        customerField.setFont(new java.awt.Font("Myriad Pro", 0, 14)); // NOI18N
        getContentPane().add(customerField);
        customerField.setBounds(470, 120, 140, 30);

        selectButton.setOpaque(false);
        selectButton.setContentAreaFilled(false);
        selectButton.setBorderPainted(false);
        selectButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        selectButton.setFont(new java.awt.Font("Myriad Pro", 0, 12)); // NOI18N
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });
        getContentPane().add(selectButton);
        selectButton.setBounds(610, 120, 30, 30);

        jLabel1.setFont(new java.awt.Font("Myriad Pro", 2, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setText("Please click on a package before pressing sell");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(660, 610, 220, 13);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Icons/FlipBoard74.png"))); // NOI18N
        getContentPane().add(jLabel10);
        jLabel10.setBounds(1090, 10, 80, 70);

        jLabel11.setFont(new java.awt.Font("Myriad Pro", 0, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(254, 254, 254));
        jLabel11.setText("SJT Trading");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(1000, 30, 80, 17);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Introse New Form Designs/Sell to customer.png"))); // NOI18N
        getContentPane().add(jLabel8);
        jLabel8.setBounds(0, -10, 900, 683);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        DBconnectionImpl dBConnection;
        Connection connection;
        chartQuery = (DefaultTableModel)chart.getModel();
        s1 = itemField.getText().toUpperCase();
        s2 = brandField.getText().toUpperCase();
            try {
                dBConnection = DBconnection.getInstance();
                connection = dBConnection.getConnection();
                String query = "select * from Bundle where name = '" + s1 + "' && brandName = '" + s2 + "'" ;
                PreparedStatement preparedStatement = connection.prepareStatement(query);
                ResultSet rs = preparedStatement.executeQuery();
                while (rs.next()) {
                    chartQuery.insertRow(chartQuery.getRowCount(), new Object[]{rs.getString("stock"), rs.getString("unit"), rs.getString("packSellPrice")});
                }   
            } catch (SQLException ex) {
                Logger.getLogger(buySupply.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_generateButtonActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        customerField.setText(officeList.getSelectedValue().toString());
        
    }//GEN-LAST:event_selectButtonActionPerformed

    private void sellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButtonActionPerformed
        int column = 1;
        if(customerField.getText().equals("") || itemField.getText().equals("") || brandField.getText().equals("") || invoiceField.getText().equals("")){
            promptErrorExisting error1 = new promptErrorExisting();
            error1.setVisible(true);
        }
        else{
            o = oM.getO(customerField.getText().toUpperCase());
            itemListQuery = (DefaultTableModel)chart.getModel();
            iV = invoiceField.getText().toUpperCase();
            c = new GregorianCalendar();
            c.set(Calendar.HOUR_OF_DAY, 0); //anything 0 - 23
            c.set(Calendar.MINUTE, 0);
            c.set(Calendar.SECOND, 0);
            d1 = c.getTime(); 
            oT = new OTransaction(iV, d1, o.getName());
            oT.setTerm(Integer.parseInt(termsField.getText()));
            s2 = itemField.getText().toUpperCase();
            s1 = brandField.getText().toUpperCase();
            b1 = String.valueOf(chartQuery.getValueAt(chart.getSelectedRow(), column));
            b = bM.getB(s1, s2, b1);
            d = b.getPackSellPrice();
            count = Integer.parseInt(amountField.getText());
            oT.addSell(b, d, count);
            oT.updateStocks();
            oT.updateBundleList();
            oM.getO(o.getName()).addOTransaction(oT);
            promptSuccess ok = new promptSuccess();
            ok.setVisible(true);
        }

    }//GEN-LAST:event_sellButtonActionPerformed

    private void menuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_menuButtonActionPerformed

    private void buyfromSupplierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyfromSupplierButtonActionPerformed
       buySupply buy = new buySupply();
       buy.setVisible(true);
       this.dispose();
    }//GEN-LAST:event_buyfromSupplierButtonActionPerformed

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        
    }//GEN-LAST:event_settingsButtonActionPerformed

    private void viewingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewingButtonActionPerformed
        viewPerSupplier viewing = new viewPerSupplier();
        viewing.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_viewingButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sellSupply.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sellSupply.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sellSupply.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sellSupply.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sellSupply().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountField;
    private javax.swing.JTextField brandField;
    private javax.swing.JButton buyfromSupplierButton;
    private javax.swing.JTable chart;
    private javax.swing.JTextField customerField;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton generateButton;
    private javax.swing.JTextField invoiceField;
    private javax.swing.JLabel invoiceLabel;
    private javax.swing.JTextField itemField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton menuButton;
    private javax.swing.JList officeList;
    private javax.swing.JButton selectButton;
    private javax.swing.JButton sellButton;
    private javax.swing.JButton settingsButton;
    private javax.swing.JTable stockTable;
    private javax.swing.JTextField termsField;
    private javax.swing.JButton viewingButton;
    // End of variables declaration//GEN-END:variables
}
