/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import Connection.DBconnection;
import Implementation.BundleImpl;
import Implementation.SupplierImpl;
import Logic.Item;
import Logic.Manager;
import Logic.OfficeTransaction;
import Logic.PriceBean;
import java.awt.Color;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Raffy
 */
public class newP extends javax.swing.JFrame {

    /**
     * Creates new form newP
     */
    DefaultTableModel tableQuery1 = new DefaultTableModel();
    DefaultTableModel tableQuery2 = new DefaultTableModel();
    private Connection connection;
    private DBconnection dBConnection;
    public newP() {
        initComponents();
        tableQuery1 = (DefaultTableModel)bundletable.getModel();
            try {
            dBConnection = DBconnection.getInstance();
            connection = dBConnection.getConnection();

            String query = "select * from Item where unit is not null;";
            PreparedStatement preparedStatement = connection.prepareStatement(query);

            ResultSet rs = preparedStatement.executeQuery();
            ArrayList<Item> bundle = new ArrayList();
            while (rs.next()) {
                tableQuery1.insertRow(tableQuery1.getRowCount(), new Object[]{rs.getString("brandName"), rs.getString("name"), rs.getString("unit")});
            } 
        } catch (SQLException ex) {
            Logger.getLogger(BundleImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        tableQuery2 = (DefaultTableModel)suppliertable.getModel();
            try {
            dBConnection = DBconnection.getInstance();
            connection = dBConnection.getConnection();

            String query = "select name from supplier;";
            PreparedStatement preparedStatement = connection.prepareStatement(query);

            ResultSet rs = preparedStatement.executeQuery();
            ArrayList<Item> bundle = new ArrayList();
            while (rs.next()) {
                tableQuery2.insertRow(tableQuery2.getRowCount(), new Object[]{rs.getString("name")});
            } 
        } catch (SQLException ex) {
            Logger.getLogger(SupplierImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        confirm = new javax.swing.JButton();
        brand = new javax.swing.JTextField();
        item = new javax.swing.JTextField();
        unit = new javax.swing.JTextField();
        suppprice = new javax.swing.JTextField();
        myprice = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        bundletable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        suppliertable = new javax.swing.JTable();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 700));
        setMinimumSize(new java.awt.Dimension(800, 700));
        setPreferredSize(new java.awt.Dimension(800, 700));
        getContentPane().setLayout(null);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(150, 360, 130, 60);

        confirm.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        confirm.setOpaque(false);
        confirm.setContentAreaFilled(false);
        confirm.setBorderPainted(false);
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });
        getContentPane().add(confirm);
        confirm.setBounds(370, 650, 130, 50);

        brand.setOpaque(true);
        brand.setBorder(null);
        brand.setBackground(new Color(217, 219, 223));
        getContentPane().add(brand);
        brand.setBounds(210, 448, 140, 30);

        item.setOpaque(true);
        item.setBorder(null);
        item.setBackground(new Color(217, 219, 223));
        getContentPane().add(item);
        item.setBounds(210, 500, 140, 28);

        unit.setOpaque(true);
        unit.setBorder(null);
        unit.setBackground(new Color(217, 219, 223));
        getContentPane().add(unit);
        unit.setBounds(210, 550, 140, 30);

        suppprice.setOpaque(true);
        suppprice.setBorder(null);
        suppprice.setBackground(new Color(217, 219, 223));
        getContentPane().add(suppprice);
        suppprice.setBounds(590, 446, 140, 28);

        myprice.setOpaque(true);
        myprice.setBorder(null);
        myprice.setBackground(new Color(217, 219, 223));
        getContentPane().add(myprice);
        myprice.setBounds(590, 498, 140, 30);

        bundletable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brand Name", "Item Name", "Unit"
            }
        ));
        jScrollPane2.setViewportView(bundletable);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(430, 20, 300, 310);

        suppliertable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Supplier Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(suppliertable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 20, 280, 310);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add-price.jpg"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, -4, 800, 710);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmActionPerformed
        String bN, n, u, temp;
        Manager mngr = new Manager();
        DefaultTableModel tablequery3 = (DefaultTableModel)suppliertable.getModel();
        temp = String.valueOf(tablequery3.getValueAt(suppliertable.getSelectedRow(), 0));
	Double p, p1;
	BigInteger a, a1;
        bN = brand.getText().toUpperCase();
        n = item.getText().toUpperCase();
        u = unit.getText().toUpperCase();
        a = mngr.getS(temp).getID();
        a1 = mngr.getB(bN, n, u).getItemID();
        p = Double.parseDouble(suppprice.getText());
        p1 = Double.parseDouble(myprice.getText());
        mngr.addP(new PriceBean(a1, a, p, p1));
        this.dispose();
    }//GEN-LAST:event_confirmActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(newP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(newP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(newP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(newP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new newP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JTextField brand;
    private javax.swing.JTable bundletable;
    private javax.swing.JButton confirm;
    private javax.swing.JTextField item;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField myprice;
    private javax.swing.JTable suppliertable;
    private javax.swing.JTextField suppprice;
    private javax.swing.JTextField unit;
    // End of variables declaration//GEN-END:variables
}
